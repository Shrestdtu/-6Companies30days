// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    bool solve(vector<vector<char>>& board, string word,int i,int j,int k,int n)
    {
        if(i<0 || j<0 || i>=board.size() || j>=board[0].size() || k>=n || board[i][j]!=word[k])
        {
            return false;
        }
        if(k==n-1 && word[k]==board[i][j])
        {
            return true;
        }
        board[i][j]='0';
        bool ch= solve(board,word,i+1,j,k+1,n) || solve(board,word,i,j+1,k+1,n) || solve(board,word,i-1,j,k+1,n) || solve(board,word,i,j-1,k+1,n);
        board[i][j]=word[k];
        return ch;
    }
    bool isWordExist(vector<vector<char>>& board, string word) {
        // Code here
        if(word=="")return false;
        int k=0;
        int n=word.size();
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j]==word[k])
                {
                    bool ans=solve(board,word,i,j,k,n);
                    if(ans)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>board(n, vector<char>(m, '*'));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				cin >> board[i][j];
		string word;
		cin >> word;
		Solution obj;
		bool ans = obj.isWordExist(board, word);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends
