class Solution {
public:
    int ans=0;
    void solve(vector<vector<int>>&grid,int i,int j,queue<vector<int>>&q)
    {
        if( i>=grid.size() || j>=grid[i].size() || i<0 || j<0 ||grid[i][j]!=1)
        {
            return ;
        }
        grid[i][j]=2;
        q.push({i,j});
    }
    int orangesRotting(vector<vector<int>>& grid) {
        queue<vector<int>>q;
        int fresh=0,rotten=0,empty=0;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
                if(grid[i][j]==0)
                {
                    empty++;
                }else if(grid[i][j]==1)
                {
                    fresh++;
                }else 
                {
                    q.push({i,j});
                    rotten++;
                }
            }
        }
        if(fresh==0)return 0;
        int ans=0;
        while(!q.empty())
        {
            int k=q.size();
            while(k--)
            {
                vector<int>v=q.front();
                q.pop();
                solve(grid,v[0]-1,v[1],q);
                solve(grid,v[0]+1,v[1],q);
                solve(grid,v[0],v[1]-1,q);
                solve(grid,v[0],v[1]+1,q);
            }
            ans++;
        }
        int c=0;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
                if(grid[i][j]==2)
                {
                    c++;
                }
            }
        }
        if(c==(fresh+rotten))return ans-1;
        return -1;
    }
};
